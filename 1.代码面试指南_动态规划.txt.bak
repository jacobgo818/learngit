1.最长公共子序列

/*
 * 最长公共子序列问题;
 * 代码面试P210
 */
public static int[][] getdp(char[] str1, char[] str2) {
	int M = str1.length, N = str2.length;
	int[][] dp = new int[M][N];
	dp[0][0] = str1[0] == str2[0] ? 1 : 0;
	for (int i = 1; i < M; i++) {
		dp[i][0] = Math.max(dp[i - 1][0], str1[i] == str2[0] ? 1 : 0);
	}
	for (int j = 1; j < M; j++) {
		dp[0][j] = Math.max(dp[0][j], str2[j] == str1[0] ? 1 : 0);
	}
	for (int i = 1; i < M; i++) {
		for (int j = 1; j < N; j++) {
			dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
			if (str1[i] == str2[j])
				dp[i][j] = Math.max(dp[i][j], dp[i-1][j-1] + 1);

		}
	}
	return dp;
}

/*
 * 根据dp求最长公共子序列
 */
public static String getSubStr(int[][] dp,String str1,String str2){
	int n=dp.length-1,m=dp[0].length-1;
	char[] res=new char[dp[n][m]];
	int index=res.length-1;
	while(index>=0){
		if(n>0&&dp[n][m]==dp[n-1][m])
			n--;
		else if(m>0&&dp[n][m]==dp[n][m-1])
			m--;
		else{
			res[index--]=str1.charAt(n);
			System.out.println(str1.charAt(n));
			n--;
			m--;
		}
	}
	return new String(res);
}

================================================================================================================================
2.最小编辑代价
代码面试P217
对于两个字符串A和B，我们需要进行插入、删除和修改操作将A串变为B串，定义c0，c1，c2分别为三种操作的代价，请设计一个高效算法，求出将A串变为B串所需要的最少代价。

给定两个字符串A和B，及它们的长度和三种操作代价，请返回将A串变为B串所需要的最小代价。保证两串长度均小于等于300，且三种代价值均小于等于100。

dp[i][j] 表示str1[0...i-1]编辑成str2[0...j-1]的最小编辑代价
public int minCost1(String str1, String str2, int ic, int dc, int rc) {
	if (str1 == null || str2 == null)
		return 0;
	int row = str1.length() + 1, col = str2.length() + 1;
	int[][] dp = new int[row][col];
	for (int i = 0; i < row; i++)
		dp[i][0] = i * dc;
	for (int j = 0; j < col; j++)
		dp[0][j] = j * ic;

	for (int i = 1; i < row; i++) {
		for (int j = 1; j < col; j++) {
			if (str1.charAt(i - 1) == str2.charAt(j - 1))
				dp[i][j] = dp[i - 1][j - 1];
			else
				dp[i][j] = dp[i - 1][j - 1] + rc;
			dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + ic);
			dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + dc);
		}
	}

	return dp[row - 1][col - 1];
}
================================================================================================================================
3.字符串的交错组成 代码面试P220
public boolean chkMixture(String str1, int n, String str2, int m, String aim, int v) {
	if (str1 == null || str2 == null || aim == null)
		return false;
	char[] ch1 = str1.toCharArray();
	char[] ch2 = str2.toCharArray();
	char[] chaim = aim.toCharArray();
	if (m + n != v)
		return false;
	boolean[][] dp = new boolean[n + 1][m + 1];
	dp[0][0] = true;
	for (int i = 1; i <= n; i++) {
		if (dp[i - 1][0] && ch1[i - 1] == chaim[i - 1])
			dp[i][0] = true;
	}
	for (int j = 1; j <= m; j++) {
		if (dp[0][j-1] && ch2[j - 1] == chaim[j - 1])
			dp[0][j] = true;
	}
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			if ((dp[i - 1][j] && ch1[i - 1] == chaim[i + j - 1])
					|| (dp[i][j - 1] && ch2[j - 1] == chaim[i + j - 1]))
				dp[i][j] = true;
		}
	}
	return dp[n][m];
}
================================================================================================================================
4.将二进制转成十进制（不考虑符号位）
public int binaryToDecimal(int binaryNumber) {
	int decimal = 0;
	int p = 0;
	while (true) {
		if (binaryNumber == 0) {
			break;
		} else {
			int temp = binaryNumber % 10;
			decimal += temp * Math.pow(2, p);
			binaryNumber = binaryNumber / 10;
			p++;
		}
	}
	return decimal;
}

================================================================================================================================
5.将数字字符转换为字母组合的种数
public int numDecodings(String s) {
	if (s == null || s.length() < 1)
		return 0;
	char[] chs = s.toCharArray();
	int[] dp = new int[s.length() + 1];
	dp[s.length()] = 1;
	dp[s.length() - 1] = chs[s.length() - 1] == '0' ? 0 : 1;
	for (int i = s.length() - 2; i >= 0; i--) {
		if (chs[i] == '0')
			continue;
		else
			dp[i] = (chs[i] - '0') * 10 + (chs[i + 1] - '0') < 27 ? dp[i + 1] + dp[i + 2] : dp[i + 1];
	}

	return dp[0];
}
