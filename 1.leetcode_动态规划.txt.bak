==========================================================
10. Regular Expression Matching


'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true
==========================================================
题意是：判断s能否为正则表达式p表示，其中，'.'表示一个任意字符；'*'表示可以出现任意个前移字符



/*
 * 不知道匹配机制是什么
 * ab .*居然也能通过
 */
public boolean isMatch(String s, String p) {
		if (s == null || p == null)
			return false;
		boolean[][] res = new boolean[s.length() + 1][p.length() + 1];
		res[0][0] = true;
		for (int i = 0; i < p.length(); i++) {
			if (p.charAt(i) == '*')
				res[0][i + 1] = res[0][i - 1];
		}

		for (int i = 0; i < s.length(); i++) {
			for (int j = 0; j < p.length(); j++) {
				if (p.charAt(j) == '.')
					res[i + 1][j + 1] = res[i][j];
				if (p.charAt(j) == s.charAt(i))
					res[i + 1][j + 1] = res[i][j];
				if (p.charAt(j) == '*') {
					if (p.charAt(j - 1) == '.' || p.charAt(j - 1) == s.charAt(i)) {
						res[i + 1][j + 1] = res[i + 1][j] || res[i + 1][j - 1] || res[i][j + 1];
					} else
						res[i + 1][j + 1] = res[i + 1][j - 1];
				}
			}
		}

		return res[s.length()][p.length()];
	}

==========================================================
32. Longest Valid Parentheses


Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.
==========================================================


题意：左右括号匹配

两种解法：1.用堆栈；2.用动态规划

/*
 * 非动态规划，有时候会超时
 */
public int longestValidParentheses(String s) {
	if (s == null || s.length() < 1)
		return 0;
	Stack<Integer> stack = new Stack<Integer>();
	int max = 0, left = -1;
	for (int i = 0; i < s.length(); i++) {
		if (s.charAt(i) == '(')
			stack.push(i);
		else {
			if (!stack.isEmpty()) {
				stack.pop();
				if (!stack.isEmpty())
					max = Math.max(max, i - stack.peek());
				else
					max = Math.max(max, i - left);
			} else
				left = i;
		}
	}
	return max;
}

/*
 * 动态规划
 */
public int longestValidParentheses1(String s) {
	int maxans = 0;
	int dp[] = new int[s.length()];
	for (int i = 1; i < s.length(); i++) {
		if (s.charAt(i) == ')') {
			if (s.charAt(i - 1) == '(') {
				dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
			} else if (i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) == '(') {
				dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;
			}
			maxans = Math.max(maxans, dp[i]);
		}
	}
	return maxans;
}
// 测试
// Your runtime beats 92.48 % of java submissions.
public int longestValidParentheses2(String s) {
	if (s == null || s.length() == 0)
		return 0;
	int[] dp = new int[s.length()];
	int ans = 0;
	for (int i = 1; i < s.length(); i++) {
		// 如果是'('直接跳过，默认为0
		if (s.charAt(i) == ')') {
			if (s.charAt(i - 1) == '(')
				dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
			// 说明s.charAt(i - 1)==')'
			else if (i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) == '(') {
				dp[i] = (i - dp[i - 1] > 1 ? dp[i - dp[i - 1] - 2] : 0) + dp[i - 1] + 2;
				// 因为加了一个左括号和一个右括号，所以是加2
			}
		}
		ans = Math.max(ans, dp[i]);
	}
	return ans;
}


==========================================================
44. Wildcard Matching
正则匹配：'?'任意字符 '*'任意序列或者空

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false
==========================================================

/*
 * 二刷
 */
public boolean isMatch(String s, String p) {
	int row = s.length();
	int col = p.length();
	boolean[][] dp = new boolean[row + 1][col + 1];
	dp[0][0] = true;
	for (int j = 1; j < col + 1; j++) {
		if (dp[0][j - 1]) {
			if (p.charAt(j - 1) == '*')
				dp[0][j] = true;
			else
				break;
		}
	}
	for (int i = 0; i < row; i++)
		for (int j = 0; j < col; j++) {
			if (p.charAt(j) == s.charAt(i) || p.charAt(j) == '?')
				dp[i + 1][j + 1] = dp[i][j];
			else if (p.charAt(j) == '*') {
				dp[i + 1][j + 1] = dp[i][j] || dp[i + 1][j] || dp[i][j + 1];
			}
		}

	return dp[row][col];
}

/*
 * 一刷答案
 */
public boolean isMatch1(String s, String p) {
	boolean[][] match = new boolean[s.length() + 1][p.length() + 1];
	match[s.length()][p.length()] = true;
	for (int i = p.length() - 1; i >= 0; i--) {
		if (p.charAt(i) != '*')
			break;
		else
			match[s.length()][i] = true;
	}
	for (int i = s.length() - 1; i >= 0; i--) {
		for (int j = p.length() - 1; j >= 0; j--) {
			if (s.charAt(i) == p.charAt(j) || p.charAt(j) == '?')
				match[i][j] = match[i + 1][j + 1];
			else if (p.charAt(j) == '*')
				match[i][j] = match[i + 1][j] || match[i][j + 1];
			else
				match[i][j] = false;
		}
	}
	return match[0][0];
}

==========================================================
53. Maximum Subarray
简单题：就是求最大的子序列

Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

==========================================================

public int maxSubArray(int[] nums) {
	int maxEndingHere = 0;
	int maxSoFar = Integer.MIN_VALUE;
	for (int i = 0; i < nums.length; i++) {
		maxEndingHere += nums[i];
		if (maxEndingHere > maxSoFar)
			maxSoFar = maxEndingHere;
		if (maxEndingHere < 0)
			maxEndingHere = 0;
	}
	return maxSoFar;
}

==========================================================
62. Unique Paths

最简单的动态规划，一个矩阵，机器人初始位于左上角，每一格只能向右或者向下走
求到达右下角的所有路径和

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?


Above is a 3 x 7 grid. How many possible unique paths are there?

Note: m and n will be at most 100.
==========================================================

public int uniquePaths(int m, int n) {
	int[] dp = new int[n];
	Arrays.fill(dp, 1);

	for (int i = 1; i < m; i++) {
		for (int j = 1; j < n; j++) {
			dp[j]+=dp[j-1];
		}
	}
	return dp[n-1];
}


==========================================================
63. Unique Paths II

也是简单题：一个矩阵，机器人初始位于左上角，每一格只能向右或者向下走
求到达右下角的所有路径和，在矩阵中可能存在障碍。

Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: m and n will be at most 100.
==========================================================

public int uniquePathsWithObstacles1(int[][] obstacleGrid) {
		if (obstacleGrid == null || obstacleGrid.length == 0 || obstacleGrid[0].length == 0)
			return 0;
		int m = obstacleGrid.length;
		int n = obstacleGrid[0].length;

		obstacleGrid[0][0] ^= 1;

		for (int i = 1; i < m; i++) {
			obstacleGrid[i][0] = obstacleGrid[i][0] == 1 ? 0 : obstacleGrid[i - 1][0];
		}

		for (int i = 1; i < n; i++) {
			obstacleGrid[0][i] = obstacleGrid[0][i] == 1 ? 0 : obstacleGrid[0][i - 1];
		}

		for (int i = 1; i < m; i++) {
			for (int j = 1; j < n; j++) {
				obstacleGrid[i][j] = obstacleGrid[i][j] == 1 ? 0 : obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];
			}
		}
		return obstacleGrid[m - 1][n - 1];
	}

==========================================================
64. Minimum Path Sum

从矩阵左上角到右下角，找到最小路径和


Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example 1:
[[1,3,1],
 [1,5,1],
 [4,2,1]]
Given the above grid map, return 7. Because the path 1→3→1→1→1 minimizes the sum.
==========================================================

public int minPathSum(int[][] grid) {
	int row = grid.length;
	int col = grid[0].length;

	int[][] dp = new int[row][col];
	dp[0][0] = grid[0][0];

	for (int i = 1; i < row; i++) {
		dp[i][0] = dp[i - 1][0] + grid[i][0];
	}

	for (int j = 1; j < col; j++) {
		dp[0][j] = dp[0][j - 1] + grid[0][j];
	}

	for (int i = 1; i < row; i++)
		for (int j = 1; j < col; j++) {
			dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
		}

	return dp[row - 1][col - 1];
}


==========================================================

70. Climbing Stairs

斐波那契数列问题，关键点，找出递推公式，然后写出矩阵N次方的方法（logN）

矩阵N次方方法可以直接复制


You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.


Example 1:

Input: 2
Output:  2
Explanation:  There are two ways to climb to the top.

1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output:  3
Explanation:  There are three ways to climb to the top.

1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

==========================================================

/*
 * 动态规划解法
 */
public int climbStairs3(int n) {
	if (n <= 0)
		return 0;
	if (n == 1)
		return 1;
	if (n == 2)
		return 2;

	int[][] base = { { 1, 1 }, { 1, 0 } };
	int[][] res = matrixPower(base, n - 2);

	return 2*res[0][0] + res[1][0];
}


/*
 * 求矩阵m的p次方
 */
public int[][] matrixPower(int[][] m, int p) {
	int[][] res = new int[m.length][m[0].length];
	// 把res设为单位矩阵，相当于整数中的1；
	for (int i = 0; i < res.length; i++) {
		res[i][i] = 1;
	}

	int[][] tmp = m;
	for (; p != 0; p >>= 1) {
		if ((p & 1) != 0)
			res = muliMatrix(res, tmp);
		tmp = muliMatrix(tmp, tmp);
	}
	return res;
}

/*
 * 两个矩阵相乘
 */
private int[][] muliMatrix(int[][] m1, int[][] m2) {
	int[][] res = new int[m1.length][m2[0].length];
	for (int i = 0; i < m1.length; i++) {
		for (int j = 0; j < m2[0].length; j++) {
			for (int k = 0; k < m2.length; k++) {
				res[i][j] += m1[i][k] * m2[k][j];
			}
		}
	}
	return res;
}


public int climbStairs(int n) {
	if (n <= 0)
		return 0;
	if (n == 1)
		return 1;
	if (n == 2)
		return 2;

	int oneStepBefore = 2;
	int twoStepsBefore = 1;
	int allWays = 0;
	
	for(int i=3;i<=n;i++){
		allWays=oneStepBefore+twoStepsBefore;
		twoStepsBefore=oneStepBefore;
		oneStepBefore=allWays;
	}
	return allWays;
}






==========================================================
72. Edit Distance

求 word1到word2需要变换的最小次数，一次可以插入、删除、替换一个字母
dp[i][j]表示word1[0...i-1]变到word2[0...j-1]所需要的最少次数


Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character

==========================================================

public int minDistance(String word1, String word2) {
	if (word1 == null || word2 == null)
		return -1;
	int row = word1.length();
	int col = word2.length();

	int[][] dp = new int[row + 1][col + 1];

	for (int i = 1; i < row + 1; i++) {
		dp[i][0] = i;
	}

	for (int j = 1; j < col + 1; j++) {
		dp[0][j] = j;
	}
	int min = 0;
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			min = Math.min(dp[i][j + 1], dp[i + 1][j]) + 1;
			if (word1.charAt(i) == word2.charAt(j))
				min = Math.min(min, dp[i][j]);
			else
				min = Math.min(min, dp[i][j] + 1);
			dp[i + 1][j + 1] = min;
		}
	}
	return dp[row][col];
}

==========================================================
84. Largest Rectangle in Histogram

求解直方图中最大的矩形面积

Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.


Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].


The largest rectangle is shown in the shaded area, which has area = 10 unit.

For example,
Given heights = [2,1,5,6,2,3],
return 10.
==========================================================

public int largestRectangleArea1(int[] heights) {
	if (heights == null || heights.length < 1)
		return 0;

	Stack<Integer> stack = new Stack<Integer>();
	stack.push(-1);
	int max = 0;
	for (int i = 0; i < heights.length; i++) {
		// 把堆栈中比heights[i]大的元素都pop出，并计算面积
		while (stack.peek() != -1 && heights[i] < heights[stack.peek()]) {
			int top = stack.pop();
			// 面积计算公式：(i - 1-stack.peek() ) * heights[top])
			max = Math.max(max, (i - 1 - stack.peek()) * heights[top]);
		}
		stack.push(i);
	}
	while (stack.peek() != -1) {
		int top = stack.pop();
		max = Math.max(max, (heights.length - 1 - stack.peek()) * heights[top]);
	}
	return max;
}
===============================================================================================================================
85. Maximal Rectangle

这题是基于84题进行求解的

Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

For example, given the following matrix:

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
Return 6.
================================================================================================================================

public int maximalRectangle(char[][] matrix) {
	if (matrix == null || matrix.length < 1)
		return 0;
	int[] heights = new int[matrix[0].length];
	int max = 0;
	for (int i = 0; i < matrix.length; i++) {
		for (int j = 0; j < matrix[0].length; j++) {
			if (matrix[i][j] == '0')
				heights[j] = 0;
			else
				heights[j]++;
		}
		max = Math.max(max, largestRectangleArea(heights));
	}
	return max;
}

public int largestRectangleArea(int[] heights) {
	if (heights == null || heights.length < 1)
		return 0;
	Stack<Integer> stack = new Stack<Integer>();
	stack.push(-1);
	int max = heights[0];
	for (int i = 0; i < heights.length; i++) {
		if (stack.isEmpty() || stack.peek() == -1 || heights[stack.peek()] <= heights[i])
			stack.push(i);
		else {
			int curHeight = 0;
			int curArea = 0;
			while (stack.peek() != -1 && heights[stack.peek()] > heights[i]) {
				curHeight = heights[stack.pop()];
				curArea = curHeight * (i - 1 - stack.peek());
				max = Math.max(max, curArea);
			}
			stack.push(i);
		}
	}
	while (stack.peek() != -1) {
		int top = stack.pop();
		max = Math.max(max, (heights.length - 1 - stack.peek()) * heights[top]);
	}
	return max;
}

================================================================================================================================
87. Scramble String

题意：可以交换左子树和右子树
两个关键点：
1.只能交换非叶节点的两个字节点，不能任意交换节点
2.一个字符串的左子树字符数和右子树字符数是任意的

Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.
================================================================================================================================
public boolean isScramble(String s1, String s2) {
	if (s1.equals(s2))
		return true;
	
	int[] letters = new int[26];
	for (int i = 0; i < s1.length(); i++) {
		letters[s1.charAt(i) - 'a']++;
		letters[s2.charAt(i) - 'a']--;
	}
	
	for (int i = 0; i < 26; i++)
		if (letters[i] != 0)
			return false;

	for (int i = 1; i < s1.length(); i++) {
		if (isScramble(s1.substring(0, i), s2.substring(0, i)) 
				&& isScramble(s1.substring(i), s2.substring(i)))
			return true;
		if (isScramble(s1.substring(0, i), s2.substring(s2.length() - i))
				&& isScramble(s1.substring(i), s2.substring(0, s2.length() - i)))
			return true;
	}

	return false;
}


================================================================================================================================
91. Decode Ways

题意：数字字符转换为字母组合的种数

A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.

================================================================================================================================
public int numDecodings(String s) {
	if (s == null || s.length() < 1)
		return 0;
	char[] chs = s.toCharArray();
	int[] dp = new int[s.length() + 1];
	dp[s.length()] = 1;
	dp[s.length() - 1] = chs[s.length() - 1] == '0' ? 0 : 1;
	for (int i = s.length() - 2; i >= 0; i--) {
		if (chs[i] == '0')
			continue;
		else
			dp[i] = (chs[i] - '0') * 10 + (chs[i + 1] - '0') < 27 ? dp[i + 1] + dp[i + 2] : dp[i + 1];
	}

	return dp[0];
}








