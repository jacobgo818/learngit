1.最长公共子序列

/*
	 * 最长公共子序列问题;
	 * 代码面试P210
	 */
	public static int[][] getdp(char[] str1, char[] str2) {
		int M = str1.length, N = str2.length;
		int[][] dp = new int[M][N];
		dp[0][0] = str1[0] == str2[0] ? 1 : 0;
		for (int i = 1; i < M; i++) {
			dp[i][0] = Math.max(dp[i - 1][0], str1[i] == str2[0] ? 1 : 0);
		}
		for (int j = 1; j < M; j++) {
			dp[0][j] = Math.max(dp[0][j], str2[j] == str1[0] ? 1 : 0);
		}
		for (int i = 1; i < M; i++) {
			for (int j = 1; j < N; j++) {
				dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
				if (str1[i] == str2[j])
					dp[i][j] = Math.max(dp[i][j], dp[i-1][j-1] + 1);

			}
		}
		return dp;
	}
	
	/*
	 * 根据dp求最长公共子序列
	 */
	public static String getSubStr(int[][] dp,String str1,String str2){
		int n=dp.length-1,m=dp[0].length-1;
		char[] res=new char[dp[n][m]];
		int index=res.length-1;
		while(index>=0){
			if(n>0&&dp[n][m]==dp[n-1][m])
				n--;
			else if(m>0&&dp[n][m]==dp[n][m-1])
				m--;
			else{
				res[index--]=str1.charAt(n);
				System.out.println(str1.charAt(n));
				n--;
				m--;
			}
		}
		return new String(res);
	}
